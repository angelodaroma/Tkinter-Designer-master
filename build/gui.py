
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

import math
from pathlib import Path
from Telem import *
import serial
from collections import *
import time
# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, StringVar
from tkinter import ttk
import matplotlib
from matplotlib.figure import Figure
matplotlib.use('TkAgg')
import tkintermapview
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"/Users/angeloromano/Documents/ICARUS/AirTelemGUI0.1/Tkinter-Designer-master/build/assets/frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

#Begin user defined variables
Baro_Alpha = 8006.0         #Parameter from standard atmosphere model
Field_Altitude = 240.0      #Altitude of the airfield used for barometer calibration
GPSTrace_Lenght = 50        #GPS trace lenght in samples
#End user defined variables

#System Variables
AltGPS_Offset = 0.0
AltBaro_Offset = 0.0
Ground_Pressure = 0.0
GPS_Alt = 0.0
Barometric_Altitude = 0.0
Baro_P0 = 5.0
Baro_Pressure = 0.0
Position_Index = 0
Refresh_Events = 0
Position_List = deque([0.0,0.0])
Current_List = deque([0.0,0.0])
Altitude_List = deque([0.0,0.0])


window = Tk()

def Init_Serial():
    global n
    Serial_Port = n.get()
    Connect_Serial(Serial_Port)
    window.after(100, update_ip)


def Reset_Altitude():
    global AltBaro_Offset
    global AltGPS_Offset
    global GPS_Alt
    global Barometric_Altitude

    print(GPS_Alt)
    AltBaro_Offset += Barometric_Altitude 
    AltGPS_Offset += GPS_Alt

def Barometer_Calibration():
    global Baro_P0
    global Field_Altitude
    global Baro_Pressure
    Baro_P0 = Baro_Pressure/(math.exp((-Field_Altitude/Baro_Alpha)))
    AltCalib_Button['state'] = 'disabled'
    


def update_ip():
    global GPSTrace_Lenght
    global Refresh_Events
    global AltBaro_Offset
    global AltGPS_Offset
    global GPS_Alt
    global Barometric_Altitude
    global Baro_P0
    global Field_Altitude
    global Baro_Pressure
    global path
    global Position_Index

    Data_list = ["00"] * 18
    start = time.time()
    Data_list_temp = ReadData()
    
    if len(Data_list_temp) > 15 :
        Data_list = Data_list_temp

    canvas.itemconfigure(Orario, text=Data_list[0])
    canvas.itemconfigure(Latitude, text=Data_list[1]+'°')
    canvas.itemconfigure(Longitude, text=Data_list[2]+'°')
    canvas.itemconfigure(Heading, text=Data_list[3]+'°')
    canvas.itemconfigure(Groundspeed, text=Data_list[4]+' m/s')
    canvas.itemconfigure(Satellites, text=Data_list[5])
    canvas.itemconfigure(hdop, text=Data_list[6])

    if(is_float(Data_list[1]) and (is_float(Data_list[2]))):

        if Refresh_Events <= 1:
            Position_List[Refresh_Events] = (float(Data_list[1]),float(Data_list[2]))
        elif Refresh_Events < GPSTrace_Lenght:
            Position_List.append((float(Data_list[1]),float(Data_list[2])))
        else:
            Position_List[0] = (float(Data_list[1]),float(Data_list[2]))
            Position_List.rotate(-1)
            
        map.set_position(float(Data_list[1]),float(Data_list[2]))
        
        if Refresh_Events == 1:
            path = map.set_path([Position_List[0],Position_List[1]])
        elif Refresh_Events > 1:
            path.set_position_list(Position_List)

    if(is_float(Data_list[7])):
        GPS_Alt = float(Data_list[7]) - AltGPS_Offset
        GPS_Alt = round(GPS_Alt,2)
        canvas.itemconfigure(Altitude, text=str(GPS_Alt)+' m')

    canvas.itemconfigure(Temperature, text=Data_list[8]+' °C')
    canvas.itemconfigure(Pressure, text=Data_list[9]+' mbar')
    
    if(is_float(Data_list[9]) and float(Data_list[9] != 0)):
        Baro_Pressure = float(Data_list[9])
        Barometric_Altitude = (- Baro_Alpha * math.log(float(Data_list[9])/Baro_P0)) - AltBaro_Offset
        Barometric_Altitude = round(Barometric_Altitude,2)
        canvas.itemconfigure(BaroAlt, text=str(Barometric_Altitude)+' m')

        if Refresh_Events <= 1:
            Altitude_List[Refresh_Events] = (Refresh_Events,Barometric_Altitude)
        elif Refresh_Events < GPSTrace_Lenght:
            Altitude_List.append((Refresh_Events,Barometric_Altitude))
        else:
            Altitude_List[0] = (Refresh_Events,Barometric_Altitude)
            Altitude_List.rotate(-1)
        
        if Refresh_Events > 1:
            Altitude_Plot.cla()
            Altitude_Plot.plot(*zip(*Altitude_List))
            Altitude_Plot.grid(visible=True)
        plot1.draw()

    canvas.itemconfigure(Pitch, text=Data_list[10]+'°')
    canvas.itemconfigure(Roll, text=Data_list[11]+'°')
    canvas.itemconfigure(Yaw, text="0"+'°')

    canvas.itemconfigure(Voltage, text=Data_list[12]+' V')
    canvas.itemconfigure(Current, text=Data_list[14]+' A')
    
    if(is_float(Data_list[12]) and is_float(Data_list[14])):
        P = float(Data_list[12]) * float(Data_list[14])
        P = round(P,1)
        canvas.itemconfigure(Power, text=str(P)+' W')

        if Refresh_Events <= 1:
            Current_List[Refresh_Events] = (Refresh_Events,float(Data_list[14]))
        elif Refresh_Events < GPSTrace_Lenght:
            Current_List.append((Refresh_Events,float(Data_list[14])))
        else:
            Current_List[0] = (Refresh_Events,float(Data_list[14]))
            Current_List.rotate(-1)

        if Refresh_Events > 1:
            Current_Plot.cla()
            Current_Plot.plot(*zip(*Current_List))
            Current_Plot.grid(visible=True)
            plot2.draw()
              
    Position_Index = Position_Index + 1

    if Position_Index % GPSTrace_Lenght == 0:
        Position_Index = 0
    window.after(1, update_ip)
    Refresh_Events += 1
    stop = time.time()
    print("%f",stop-start)

window.geometry("1280x832")
window.configure(bg = "#000000")


canvas = Canvas(
    window,
    bg = "#000000",
    height = 832,
    width = 1280,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_text(
    55.0,
    82.0,
    anchor="nw",
    text="Velocità:",
    fill="#E5E1E1",
    font=("Inter", 32 * -1)
)

Orario = canvas.create_text(
    96.0,
    34.0,
    anchor="nw",
    text="12:00:00.000",
    fill="#E5E1E1",
    font=("Inter", 32 * -1)
)

Groundspeed = canvas.create_text(
    209.0,
    82.0,
    anchor="nw",
    text="100.00 m/s\n",
    fill="#E5E1E1",
    font=("Inter", 32 * -1)
)

canvas.create_text(
    36.0,
    130.0,
    anchor="nw",
    text="Altitudine:",
    fill="#E5E1E1",
    font=("Inter", 32 * -1)
)

Altitude = canvas.create_text(
    209.0,
    130.0,
    anchor="nw",
    text="120.00 m\n",
    fill="#E5E1E1",
    font=("Inter", 32 * -1)
)

canvas.create_text(
    47.0,
    178.0,
    anchor="nw",
    text="Corrente:",
    fill="#E5E1E1",
    font=("Inter", 32 * -1)
)

Current = canvas.create_text(
    209.0,
    178.0,
    anchor="nw",
    text="99.99 A\n",
    fill="#E5E1E1",
    font=("Inter", 32 * -1)
)

canvas.create_text(
    44.0,
    226.0,
    anchor="nw",
    text="Tensione:",
    fill="#E5E1E1",
    font=("Inter", 32 * -1)
)

Voltage = canvas.create_text(
    209.0,
    226.0,
    anchor="nw",
    text="11.99 V\n",
    fill="#E5E1E1",
    font=("Inter", 32 * -1)
)

canvas.create_text(
    53.0,
    274.0,
    anchor="nw",
    text="Potenza:",
    fill="#E5E1E1",
    font=("Inter", 32 * -1)
)

Power = canvas.create_text(
    209.0,
    274.0,
    anchor="nw",
    text="999.9 W\n",
    fill="#E5E1E1",
    font=("Inter", 32 * -1)
)

canvas.create_text(
    50.0,
    322.0,
    anchor="nw",
    text="Heading:",
    fill="#E5E1E1",
    font=("Inter", 32 * -1)
)

Heading = canvas.create_text(
    210.0,
    322.0,
    anchor="nw",
    text="359°\n",
    fill="#E5E1E1",
    font=("Inter", 32 * -1)
)

canvas.create_text(
    75.0,
    370.0,
    anchor="nw",
    text="Alt Bar:",
    fill="#E5E1E1",
    font=("Inter", 32 * -1)
)

BaroAlt = canvas.create_text(
    210.0,
    370.0,
    anchor="nw",
    text="200.00 m\n",
    fill="#E5E1E1",
    font=("Inter", 32 * -1)
)

canvas.create_text(
    105.0,
    418.0,
    anchor="nw",
    text="Pitch:",
    fill="#E5E1E1",
    font=("Inter", 32 * -1)
)

Pitch = canvas.create_text(
    210.0,
    418.0,
    anchor="nw",
    text="-90°\n",
    fill="#E5E1E1",
    font=("Inter", 32 * -1)
)

canvas.create_text(
    126.0,
    466.0,
    anchor="nw",
    text="Roll:",
    fill="#E5E1E1",
    font=("Inter", 32 * -1)
)

Roll = canvas.create_text(
    210.0,
    466.0,
    anchor="nw",
    text="180°\n",
    fill="#E5E1E1",
    font=("Inter", 32 * -1)
)

canvas.create_text(
    118.0,
    514.0,
    anchor="nw",
    text="Yaw:",
    fill="#E5E1E1",
    font=("Inter", 32 * -1)
)

Yaw = canvas.create_text(
    211.0,
    514.0,
    anchor="nw",
    text="359°\n",
    fill="#E5E1E1",
    font=("Inter", 32 * -1)
)

canvas.create_text(
    47.0,
    553.0,
    anchor="nw",
    text="Airspeed:",
    fill="#E5E1E1",
    font=("Inter", 32 * -1)
)

Airspeed = canvas.create_text(
    212.0,
    558.0,
    anchor="nw",
    text="100.00 m/s\n",
    fill="#E5E1E1",
    font=("Inter", 32 * -1)
)

canvas.create_text(
    91.0,
    639.0,
    anchor="nw",
    text="Pressione:",
    fill="#E5E1E1",
    font=("Inter", 20 * -1)
)

Pressure = canvas.create_text(
    209.0,
    639.0,
    anchor="nw",
    text="1000.00 mbar\n",
    fill="#E5E1E1",
    font=("Inter", 20 * -1)
)

canvas.create_text(
    96.0,
    687.0,
    anchor="nw",
    text="N satelliti:",
    fill="#E5E1E1",
    font=("Inter", 20 * -1)
)

Satellites = canvas.create_text(
    209.0,
    687.0,
    anchor="nw",
    text="20\n",
    fill="#E5E1E1",
    font=("Inter", 20 * -1)
)

canvas.create_text(
    89.0,
    711.0,
    anchor="nw",
    text="Latitudine:",
    fill="#E5E1E1",
    font=("Inter", 20 * -1)
)

Latitude = canvas.create_text(
    209.0,
    711.0,
    anchor="nw",
    text="45.9312313°\n",
    fill="#E5E1E1",
    font=("Inter", 20 * -1)
)

canvas.create_text(
    72.0,
    735.0,
    anchor="nw",
    text="Longitudine:",
    fill="#E5E1E1",
    font=("Inter", 20 * -1)
)

canvas.create_text(
    63.0,
    663.0,
    anchor="nw",
    text="Temperatura:",
    fill="#E5E1E1",
    font=("Inter", 20 * -1)
)

Longitude = canvas.create_text(
    209.0,
    735.0,
    anchor="nw",
    text="7.812312391°\n",
    fill="#E5E1E1",
    font=("Inter", 20 * -1)
)

canvas.create_text(
    135.0,
    759.0,
    anchor="nw",
    text="hdop:",
    fill="#E5E1E1",
    font=("Inter", 20 * -1)
)

hdop = canvas.create_text(
    209.0,
    759.0,
    anchor="nw",
    text="10000\n",
    fill="#E5E1E1",
    font=("Inter", 20 * -1)
)

Temperature = canvas.create_text(
    209.0,
    663.0,
    anchor="nw",
    text="100.00 °C",
    fill="#E5E1E1",
    font=("Inter", 20 * -1)
)

#plot1 = canvas.create_rectangle(
#    454.0,
#    545.0,
#    840.0,
#    783.0,
#    fill="#D5D5D5",
#    outline="")

# the figure that will contain the plot
ALT_Plot = Figure(figsize = (3.85, 2.6), dpi = 100)  
#ALT_Plot.add_gridspec(1,1)
ALT_Plot.suptitle('Altitude AGL (m)')
# list of squares
y = [i**2 for i in range(101)]
# adding the subplot
Altitude_Plot = ALT_Plot.add_subplot()
Altitude_Plot.grid(visible=True)
plot1 = FigureCanvasTkAgg(figure=ALT_Plot,master=window)
plot1.draw()
plot1.get_tk_widget().place(x=454,y=545)


#plot2 = canvas.create_rectangle(
#    863.0,
#    545.0,
#    1249.0,
#    783.0,
#    fill="#D5D5D5",
#    outline="")

# the figure that will contain the plot
CUR_Plot = Figure(figsize = (3.85, 2.6), dpi = 100)  
CUR_Plot.add_gridspec(10,10)
CUR_Plot.suptitle('Current (A)')
# list of squares
y = [i**2 for i in range(101)]
# adding the subplot
Current_Plot = CUR_Plot.add_subplot()
Current_Plot.grid(visible=True)
plot2 = FigureCanvasTkAgg(figure=CUR_Plot,master=window)
plot2.draw()
plot2.get_tk_widget().place(x=863,y=545)

map = tkintermapview.TkinterMapView(window,width=795,height=480,corner_radius=10)
map.set_tile_server("https://mt0.google.com/vt/lyrs=s&hl=en&x={x}&y={y}&z={z}&s=Ga", max_zoom=20)  # google satellite
map.place(x=454,y=34)
map.set_zoom(15)

#map = canvas.create_rectangle(
#    454.0,
#    34.0,
#    1249.0,
#    514.0,
#    fill="#D5D5D5",
#    outline="")

Alt_Button = Button(window, text ="Reset Altitude", command = Reset_Altitude)
Alt_Button.place(x=100,y=600)

AltCalib_Button = Button(window, fg = "black", text ="Altimeter Calibration", command = Barometer_Calibration)
AltCalib_Button.place(x=215,y=600)

n = StringVar()
Devlist = ttk.Combobox(window, textvariable=n)
Devlist.place(x=90,y=10)

Serial_Ports = get_SerialPorts()
for i in range(len(Serial_Ports)):
    Devlist['values'] = Serial_Ports[i].device

Connect_Button = Button(window, fg = "black", text ="Connect", command = Init_Serial)
Connect_Button.place(x=240,y=8)

window.resizable(False, False)
window.title('Air Telemetry Visualizer V0.5')
window.iconbitmap("Plane.ico")

window.mainloop()
